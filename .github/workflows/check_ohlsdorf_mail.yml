name: Parkstatus Ohlsdorf

on:
  schedule:
    # Diese Cron-Ausdrücke lösen den 'erfassen'-Workflow zu bestimmten Minuten aus.
    # Hinweis: GitHub Actions Cron-Zeiten sind in UTC.
    # Um 9:00, 9:10, 9:20 MESZ (UTC+2) zu erhalten, wären die UTC-Zeiten 7:00, 7:10, 7:20.
    - cron: '0 7 * * *'  # 9:00 MESZ
    - cron: '10 7 * * *' # 9:10 MESZ
    - cron: '20 7 * * *' # 9:20 MESZ
    # Dies ist der Cron-Job, der die E-Mail-Versandlogik auslösen soll.
    - cron: '31 7 * * *' # 9:31 MESZ (für den E-Mail-Versand)
  workflow_dispatch: # Ermöglicht manuelles Auslösen des gesamten Workflows

jobs:
  erfassen:
    runs-on: ubuntu-latest
    outputs:
      is_email_trigger_run: ${{ steps.set_email_flag.outputs.is_email_trigger_run }} # Exponiert das Flag
    steps:
      - uses: actions/checkout@v4

      - name: Installiere Abhängigkeiten
        run: pip install requests

      - name: Parkdaten erfassen
        id: capture_data
        run: |
          CURRENT_MINUTE=$(date +%M)
          CURRENT_HOUR=$(date +%H)
          FILE_NAME=""

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "$CURRENT_HOUR" == "07" && "$CURRENT_MINUTE" == "00" ]]; then
              FILE_NAME="1501.txt" # Entspricht 9:00 MESZ
            elif [[ "$CURRENT_HOUR" == "07" && "$CURRENT_MINUTE" == "10" ]]; then
              FILE_NAME="1502.txt" # Entspricht 9:10 MESZ
            elif [[ "$CURRENT_HOUR" == "07" && "$CURRENT_MINUTE" == "20" ]]; then
              FILE_NAME="1503.txt" # Entspricht 9:20 MESZ
            else
              # Dieser Fall ist für den 9:31 MESZ Cron-Job.
              # Die Daten werden dennoch erfasst, aber in eine temporäre Datei geschrieben,
              # da die Hauptdaten bereits von den vorherigen Läufen stammen.
              FILE_NAME="temp-trigger.txt"
            fi
          else # workflow_dispatch (manuelles Auslösen)
            FILE_NAME="manual-test.txt"
          fi

          echo "--- Starte Datenerfassung für: $FILE_NAME ---"

          CURL_OUTPUT=$(curl -s -w "%{http_code}" 'https://www.pr.hamburg/ws/ws.get.status.php?obj=173')
          HTTP_CODE="${CURL_OUTPUT:(-3)}"
          DATA="${CURL_OUTPUT:0:${#CURL_OUTPUT}-3}"

          echo "HTTP Status Code von curl: $HTTP_CODE"
          echo "Rohe DATEN von curl: '${DATA}'"

          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "Fehler: curl hat den HTTP-Statuscode $HTTP_CODE zurückgegeben. Daten könnten unvollständig oder ungültig sein."
            echo "Vollständige curl-Ausgabe: '$CURL_OUTPUT'"
            exit 1
          fi

          if [ -z "$DATA" ]; then
            echo "Fehler: DATEN von curl sind leer. Dies könnte ein Netzwerkproblem sein oder die URL hat keinen Inhalt zurückgegeben."
            exit 1
          fi

          FREE=$(echo "$DATA" | tr -d '[:space:]')

          if ! [[ "$FREE" =~ ^[0-9]+$ ]]; then
            echo "Fehler: Der extrahierte Wert '$FREE' ist keine gültige Zahl."
            exit 1
          fi

          echo "Extrahierte freie Plätze: $FREE"

          touch "$FILE_NAME"
          echo "$FREE" > "$FILE_NAME"
          echo "Erfolgreich $FREE in $FILE_NAME geschrieben"

          echo "captured_file=$FILE_NAME" >> $GITHUB_OUTPUT

      - name: Setze Flag für E-Mail-Versand
        id: set_email_flag
        run: |
          echo "--- Debugging E-Mail-Flag-Einstellung ---"
          echo "github.event_name: '${{ github.event_name }}'"
          echo "github.event.schedule: '${{ github.event.schedule }}'" # Mit Anführungszeichen, um Leerzeichen/Zeilenumbrüche zu erkennen

          # Überprüfen der Bedingungen
          IS_SCHEDULE_EVENT="${{ github.event_name == 'schedule' }}"
          IS_CORRECT_CRON_STRING="${{ github.event.schedule == '31 7 * * *' }}" # Angepasst auf 9:31 MESZ / 7:31 UTC
          echo "Ist 'schedule' Event: $IS_SCHEDULE_EVENT"
          echo "Ist korrekter Cron-String ('31 7 * * *'): $IS_CORRECT_CRON_STRING"

          # Setzt ein Flag, wenn dieser spezifische Cron-Job den Workflow ausgelöst hat.
          if [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "31 7 * * *" ]]; then
            echo "Bedingung erfüllt: Dies ist der E-Mail-Trigger-Lauf."
            echo "is_email_trigger_run=true" >> $GITHUB_OUTPUT
          else
            echo "Bedingung NICHT erfüllt: Dies ist NICHT der E-Mail-Trigger-Lauf."
            echo "is_email_trigger_run=false" >> $GITHUB_OUTPUT
          fi
          echo "Endgültiger is_email_trigger_run Output: ${{ steps.set_email_flag.outputs.is_email_trigger_run }}"
          echo "--- Ende Debugging E-Mail-Flag-Einstellung ---"

      - name: Speichere alle .txt Dateien als Artifact
        uses: actions/upload-artifact@v4
        with:
          name: parkstatus
          path: "*.txt"
          # retention-days: 1 # Optional: Verlauf für 1 Tag beibehalten

  mailversand:
    runs-on: ubuntu-latest
    needs: erfassen # Stellt sicher, dass die Datenerfassung abgeschlossen ist
    # Die E-Mail nur senden, wenn manuell ausgelöst (ganzer Workflow)
    # ODER wenn das Flag vom 'erfassen'-Job auf 'true' gesetzt wurde.
    if: github.event_name == 'workflow_dispatch' || needs.erfassen.outputs.is_email_trigger_run == 'true'
    steps:
      - name: Lade Dateien aus vorherigen Jobs
        uses: actions/download-artifact@v4
        with:
          name: parkstatus
          path: .

      - name: Lade Parkdaten und bereite Nachricht vor
        id: load
        run: |
          # Standardwert -1 verwenden, wenn Dateien nicht gefunden werden
          free_530=$(cat 1501.txt 2>/dev/null || echo "-1")
          free_600=$(cat 1502.txt 2>/dev/null || echo "-1")
          free_630=$(cat 1503.txt 2>/dev/null || echo "-1")
          manual_free=$(cat manual-test.txt 2>/dev/null || echo "-1")

          echo "free_530=$free_530" >> $GITHUB_OUTPUT
          echo "free_600=$free_600" >> $GITHUB_OUTPUT
          echo "free_630=$free_630" >> $GITHUB_OUTPUT
          echo "manual_free=$manual_free" >> $GITHUB_OUTPUT

      - name: Datum bestimmen
        id: datum
        run: |
          echo "today=$(date '+%d.%m.%Y')" >> $GITHUB_OUTPUT

      - name: E-Mail senden
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port:    ${{ secrets.SMTP_PORT }}
          username:       ${{ secrets.SMTP_USERNAME }}
          password:       ${{ secrets.SMTP_PASSWORD }}
          subject:        "Parkstatus Ohlsdorf am ${{ steps.datum.outputs.today }}${{ github.event_name == 'workflow_dispatch' && ' (manuell)' || '' }}"
          to:             ${{ secrets.EMAIL_TO }}
          from:           ${{ secrets.EMAIL_FROM }}
          body: |
            Guten Morgen,

            hier die Parkbelegung an der P+R-Anlage Ohlsdorf:

            ${{ github.event_name == 'schedule' && format('
            – Um 09:00 Uhr: {0} freie Plätze
            – Um 09:10 Uhr: {1} freie Plätze
            – Um 09:20 Uhr: {2} freie Plätze
            ', steps.load.outputs.free_530, steps.load.outputs.free_600, steps.load.outputs.free_630) || '' }}

            ${{ github.event_name == 'workflow_dispatch' && format('
            – Manuell erfasst: {0} freie Plätze
            ', steps.load.outputs.manual_free) || '' }}

            Viele Grüße!

      - name: Lösche temporäre Dateien
        run: rm -f *.txt || true
