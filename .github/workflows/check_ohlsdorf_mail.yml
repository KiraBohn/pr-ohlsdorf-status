name: Parkstatus Ohlsdorf

on:
  schedule:
    # These cron expressions trigger the workflow at specific minutes.
    # Note: GitHub Actions cron times are in UTC. '18' is 6 PM UTC.
    # To get 20:15, 20:16, 20:17, 20:18 MESZ (UTC+2), the UTC times would be 18:15, 18:16, 18:17, 18:18.
    # Your current cron values seem correct for 20:15-20:18 MESZ if the server is UTC.
    - cron: '15 18 * * *'
    - cron: '16 18 * * *'
    - cron: '17 18 * * *'
    - cron: '18 18 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  erfassen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installiere Abhängigkeiten
        run: pip install requests

      - name: Parkdaten erfassen
        id: capture_data # Add an ID to this step
        run: |
          CURRENT_MINUTE=$(date +%M) # Get the current minute
          FILE_NAME=""

          # Determine file name based on the current minute (which corresponds to the cron trigger)
          # For manual runs, use manual-test.txt
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            case $CURRENT_MINUTE in
              "15") FILE_NAME="1501.txt" ;;
              "16") FILE_NAME="1502.txt" ;;
              "17") FILE_NAME="1503.txt" ;;
              # The '18' cron job is handled by the 'manual-test.txt' for now if not explicitly assigned
              *) FILE_NAME="error-unknown-minute.txt" ;; # Fallback for unexpected scheduled minute
            esac
          else # workflow_dispatch (manual trigger)
            FILE_NAME="manual-test.txt"
          fi

          echo "--- Starting data capture for: $FILE_NAME ---"

          # Use -s (silent) and -w (write-out) to get HTTP status code
          # The %{http_code} will be appended to the output
          CURL_OUTPUT=$(curl -s -w "%{http_code}" 'https://www.pr.hamburg/ws/ws.get.status.php?obj=173')
          # Extract the last 3 characters as the HTTP code
          HTTP_CODE="${CURL_OUTPUT:(-3)}"
          # Extract the actual data by removing the HTTP code from the end
          DATA="${CURL_OUTPUT:0:${#CURL_OUTPUT}-3}"

          echo "HTTP Status Code from curl: $HTTP_CODE"
          echo "Raw DATA from curl: $DATA" # Print full data now that it's just a number

          # Check if curl returned a successful HTTP status code
          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "Error: curl returned HTTP status code $HTTP_CODE. Data might be incomplete or invalid."
            echo "Full curl output: $CURL_OUTPUT"
            exit 1 # Fail the step if HTTP status is not 200
          fi

          # Check if DATA is empty after stripping HTTP code
          if [ -z "$DATA" ]; then
            echo "Error: DATA from curl is empty. This could be a network issue or the URL returned no content."
            exit 1 # Fail the step if data is empty
          fi

          # Directly use DATA as FREE, as it appears to be the number itself
          FREE="$DATA"

          # Basic validation to ensure FREE is a number
          if ! [[ "$FREE" =~ ^[0-9]+$ ]]; then
            echo "Error: Extracted value '$FREE' is not a valid number."
            exit 1 # Fail if the extracted data is not a number
          fi

          echo "Extracted FREE spaces: $FREE"

          # Ensure the file exists before writing and write the data
          touch "$FILE_NAME"
          echo "$FREE" > "$FILE_NAME"
          echo "Successfully wrote $FREE to $FILE_NAME"

          # Output the filename for subsequent steps if needed
          echo "captured_file=$FILE_NAME" >> $GITHUB_OUTPUT

      - name: Speichere alle .txt Dateien als Artifact
        uses: actions/upload-artifact@v4
        with:
          name: parkstatus
          path: "*.txt"
          # retention-days: 1 # Optional: Keep history for 1 day

  mailversand:
    needs: erfassen # Ensure this job runs after 'erfassen'
    runs-on: ubuntu-latest
    steps:
      # No actions/checkout@v4 or pip install requests needed here, as artifacts are downloaded.

      - name: Lade Dateien aus vorherigen Jobs
        uses: actions/download-artifact@v4
        with:
          name: parkstatus
          path: . # Download to current directory

      - name: Lade Parkdaten und bereite Nachricht vor
        id: load
        run: |
          # Use default value of -1 if files are not found (e.g., if only one cron triggered)
          free_15=$(cat 1501.txt 2>/dev/null || echo "-1")
          free_16=$(cat 1502.txt 2>/dev/null || echo "-1")
          free_17=$(cat 1503.txt 2>/dev/null || echo "-1")
          manual_free=$(cat manual-test.txt 2>/dev/null || echo "-1")

          echo "free_15=$free_15" >> $GITHUB_OUTPUT
          echo "free_16=$free_16" >> $GITHUB_OUTPUT
          echo "free_17=$free_17" >> $GITHUB_OUTPUT
          echo "manual_free=$manual_free" >> $GITHUB_OUTPUT

      - name: Datum bestimmen
        id: datum
        run: echo "today=$(date '+%d.%m.%Y')" >> $GITHUB_OUTPUT

      - name: E-Mail senden
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port:    ${{ secrets.SMTP_PORT }}
          username:       ${{ secrets.SMTP_USERNAME }}
          password:       ${{ secrets.SMTP_PASSWORD }}
          subject:        "Parkstatus Ohlsdorf am ${{ steps.datum.outputs.today }}${{ github.event_name == 'workflow_dispatch' && ' (manuell)' || '' }}"
          to:             ${{ secrets.EMAIL_TO }}
          from:           ${{ secrets.EMAIL_FROM }}
          body: |
            Guten Nachmittag,

            hier die Parkbelegung an der P+R-Anlage Ohlsdorf:

            ${{ github.event_name == 'schedule' && format('
            – Um 20:15 Uhr: {0} freie Plätze
            – Um 20:16 Uhr: {1} freie Plätze
            – Um 20:17 Uhr: {2} freie Plätze
            ', steps.load.outputs.free_15, steps.load.outputs.free_16, steps.load.outputs.free_17) || '' }}

            ${{ github.event_name == 'workflow_dispatch' && format('
            – Manuell erfasst: {0} freie Plätze
            ', steps.load.outputs.manual_free) || '' }}

            Viele Grüße!

      - name: Lösche temporäre Dateien
        run: rm -f *.txt || true # Use -f for force removal, || true to prevent job failure if no files exist
